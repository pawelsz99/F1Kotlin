// Generated by Dagger (https://google.github.io/dagger).
package can.siempredelao.f1kotlin.dagger;

import android.app.Activity;
import android.app.Fragment;
import can.siempredelao.f1kotlin.ErrorParser;
import can.siempredelao.f1kotlin.F1Application;
import can.siempredelao.f1kotlin.F1Application_MembersInjector;
import can.siempredelao.f1kotlin.MainActivity;
import can.siempredelao.f1kotlin.MainActivity_MembersInjector;
import can.siempredelao.f1kotlin.RaceDetailsActivity;
import can.siempredelao.f1kotlin.RaceDetailsActivity_MembersInjector;
import can.siempredelao.f1kotlin.backend.Backend;
import can.siempredelao.f1kotlin.data.Clock;
import dagger.android.AndroidInjector;
import dagger.android.DaggerActivity_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityInjectorModule_MainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<
          ActivityInjectorModule_RaceDetailsActivity.RaceDetailsActivitySubcomponent.Builder>
      raceDetailsActivitySubcomponentBuilderProvider;

  private Provider<Backend> provideBackendProvider;

  private Provider<F1Application> seedInstanceProvider;

  private AppModule_ProvideContextFactory provideContextProvider;

  private Provider<ErrorParser> provideErrorParserProvider;

  private Provider<Clock> provideClockProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(2)
        .put(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider)
        .put(RaceDetailsActivity.class, (Provider) raceDetailsActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<ActivityInjectorModule_MainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityInjectorModule_MainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.raceDetailsActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityInjectorModule_RaceDetailsActivity.RaceDetailsActivitySubcomponent.Builder>() {
          @Override
          public ActivityInjectorModule_RaceDetailsActivity.RaceDetailsActivitySubcomponent.Builder
              get() {
            return new RaceDetailsActivitySubcomponentBuilder();
          }
        };
    this.provideBackendProvider =
        DoubleCheck.provider(BackendModule_ProvideBackendFactory.create(builder.backendModule));
    this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
    this.provideContextProvider =
        AppModule_ProvideContextFactory.create(builder.appModule, seedInstanceProvider);
    this.provideErrorParserProvider =
        DoubleCheck.provider(
            AppModule_ProvideErrorParserFactory.create(builder.appModule, provideContextProvider));
    this.provideClockProvider =
        DoubleCheck.provider(AppModule_ProvideClockFactory.create(builder.appModule));
  }

  @Override
  public void inject(F1Application arg0) {
    injectF1Application(arg0);
  }

  private F1Application injectF1Application(F1Application instance) {
    F1Application_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder extends AppComponent.Builder {
    private BackendModule backendModule;

    private AppModule appModule;

    private F1Application seedInstance;

    @Override
    public AppComponent build() {
      if (backendModule == null) {
        this.backendModule = new BackendModule();
      }
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(F1Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public void seedInstance(F1Application arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityInjectorModule_MainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public ActivityInjectorModule_MainActivity.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityInjectorModule_MainActivity.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          Collections
              .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                  emptyMap());
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerActivity_MembersInjector.injectFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      MainActivity_MembersInjector.injectBackend(
          instance, DaggerAppComponent.this.provideBackendProvider.get());
      MainActivity_MembersInjector.injectErrorParser(
          instance, DaggerAppComponent.this.provideErrorParserProvider.get());
      return instance;
    }
  }

  private final class RaceDetailsActivitySubcomponentBuilder
      extends ActivityInjectorModule_RaceDetailsActivity.RaceDetailsActivitySubcomponent.Builder {
    private RaceDetailsActivity seedInstance;

    @Override
    public ActivityInjectorModule_RaceDetailsActivity.RaceDetailsActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            RaceDetailsActivity.class.getCanonicalName() + " must be set");
      }
      return new RaceDetailsActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(RaceDetailsActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class RaceDetailsActivitySubcomponentImpl
      implements ActivityInjectorModule_RaceDetailsActivity.RaceDetailsActivitySubcomponent {
    private RaceDetailsActivitySubcomponentImpl(RaceDetailsActivitySubcomponentBuilder builder) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          Collections
              .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                  emptyMap());
    }

    @Override
    public void inject(RaceDetailsActivity arg0) {
      injectRaceDetailsActivity(arg0);
    }

    private RaceDetailsActivity injectRaceDetailsActivity(RaceDetailsActivity instance) {
      DaggerActivity_MembersInjector.injectFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      RaceDetailsActivity_MembersInjector.injectBackend(
          instance, DaggerAppComponent.this.provideBackendProvider.get());
      RaceDetailsActivity_MembersInjector.injectClock(
          instance, DaggerAppComponent.this.provideClockProvider.get());
      return instance;
    }
  }
}
