// Generated by Dagger (https://google.github.io/dagger).
package can.siempredelao.f1kotlin.dagger;

import android.content.Context;
import can.siempredelao.f1kotlin.ErrorParser;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideErrorParserFactory implements Factory<ErrorParser> {
  private final AppModule module;

  private final Provider<Context> contextProvider;

  public AppModule_ProvideErrorParserFactory(AppModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public ErrorParser get() {
    return provideInstance(module, contextProvider);
  }

  public static ErrorParser provideInstance(AppModule module, Provider<Context> contextProvider) {
    return proxyProvideErrorParser(module, contextProvider.get());
  }

  public static AppModule_ProvideErrorParserFactory create(
      AppModule module, Provider<Context> contextProvider) {
    return new AppModule_ProvideErrorParserFactory(module, contextProvider);
  }

  public static ErrorParser proxyProvideErrorParser(AppModule instance, Context context) {
    return Preconditions.checkNotNull(
        instance.provideErrorParser(context),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
